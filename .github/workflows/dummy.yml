name: Build Maven Project

on:
  push:
    branches:
      - main 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build with Maven
        run: mvn clean install

      - name: Run Unit test case
        run: mvn test

      - name: Archive Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact  
          path: target/
      
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=sample-project

  # upload:
  #   needs: download
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
      
  #     # - name: Set up JFrog CLI
  #     #   run: |
  #     #     curl -fL https://getcli.jfrog.io | sh
  #     #     export PATH=$PATH:$HOME/jfrog
      
  #     - name: Upload to Jfrog Artifactory
  #       uses: jfrog/setup-jfrog-cli@v1
  #       env:
  #         ARTIFACTORY_URL : ${{secrets.ARTIFACTORY_URL}}
  #         ARTIFACTORY_API_KEY: ${{ secrets.ARTIFACTORY_API_KEY}}
  #       run:  jfrog rt u "target/" "sample-project/"
      

       