name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build-test-publishArtifacts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: prodProject-${{ github.run_id }}.war
          path: target/*.war
        

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: prodProject-${{ github.run_id }}.war
          path: target

      # - name: Rename Downloaded Artifact
      #   run: |
      #       mv target/prodProject.war target/prodProjectArtifact.war
        

      - name: target Directory files
        run: |
          ls -la /home/runner/work/prodProject_CI-CD/prodProject_CI-CD/target/
        
      - name: Docker Login 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t "${DOCKER_USERNAME}/prodproject:latest" .
          docker push "${DOCKER_USERNAME}/prodproject:latest"   
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Run Docker Container
        run: |
          docker run -d -p 8080:8080 --name prodProject-container "${DOCKER_USERNAME}/prodproject:latest"





    
        

      # - name: Download artifacts to a specific folder
      #   run: |
      #     mkdir -p /tmp/artifacts
      #     cp -r .github/workflows/build-and-upload-artifacts/artifacts/* /tmp/artifacts


# name: Java CI with Maven

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]    

# jobs:
#     build-test-publishArtifacts:
#       runs-on: ubuntu-latest
#       env:
#         BUILD_NUMBER: ${{ steps.build-number.outputs.BUILD_NUMBER }}
      
  
#       steps:
#         - name: Checkout code
#           uses: actions/checkout@v2

#         - name: Cache Maven dependencies
#           uses: actions/cache@v2
#           with:
#             path: |
#               ~/.m2/repository
#             key: ${{ runner.os }}-maven-${{ hashFiles('**/*.xml') }}
#             restore-keys: |
#               ${{ runner.os }}-maven-
  
#         - name: Build with Maven
#           run: mvn clean install
        
#         # - name: Unit test case
#         #   run: mvn test
        
#         - name: Get build number
#           id: build-number
#           run: |
#             BUILD_NUMBER=$(echo ${GITHUB_SHA} | cut -c-7)
#             echo "Build number: $BUILD_NUMBER"
  

#         - name: Upload artifacts
#           uses: actions/upload-artifact@v3
#           with:
#             name: prodProject-${{ env.BUILD_NUMBER }}.jar
#             path: target/*.war

#         - name: Download artifacts to a specific folder
#           run: |
#             mkdir -p /tmp/artifacts
#             cp -r .github/workflows/build-and-upload-artifacts/artifacts/* /tmp/artifacts
    

        # - name: Build and Push Docker image
        #   run: |
        #     docker build -t "${DOCKER_USERNAME}/prodproject:latest" .    
        #   env:
        #         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}













        # - uses: jfrog/setup-jfrog-cli@v1
        # - run: jfrog --version

        
        # - uses: jfrog/setup-jfrog-cli@v3
        #   env:
        #     JF_URL: ${{ secrets.JF_URL }}
        #     JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
            
        # - run: |
        #       jf rt ping

        # - name: Configure Artifactory authentication
        #   run: |
        #     echo ARTIFACTORY_URL="${{ secrets.ARTIFACTORY_URL }}"
        #     echo ARTIFACTORY_USERNAME="${{ secrets.ARTIFACTORY_USERNAME }}"
        #     echo ARTIFACTORY_PASSWORD="${{ secrets.ARTIFACTORY_PASSWORD }}"

        # - name: Upload artifacts to Artifactory
        #   uses: nnn
        #   with:
        #       artifactory-url: http://localhost:8081/artifactory
        #       artifactory-username: admin
        #       artifactory-password: password
        #       target-repository: my-repo
        #       artifacts: target/*.jar

        # - name: Upload artifacts to Artifactory
        #   run: |
        #     echo ARTIFACTORY_URL="${{ secrets.ARTIFACTORY_URL }}"
        #     echo ARTIFACTORY_USERNAME="${{ secrets.ARTIFACTORY_USERNAME }}"
        #     echo ARTIFACTORY_PASSWORD="${{ secrets.ARTIFACTORY_PASSWORD }}"
        #     jfrog rt upload target/*.war generic

        # - name: Generate and Upload Artifacts
        #   uses: actions/upload-artifact@v2
        #   with:
        #     name: prodProjectArtifact
        #     path: target/*.war 
                 
        # - name: Docker Login 
        #   uses: docker/login-action@v3
        #   with:
        #     username: ${{ secrets.DOCKER_USERNAME }}
        #     password: ${{ secrets.DOCKER_PASSWORD }}

        # - name: Build and Push Docker image
        #   run: |
        #     docker build -t "${DOCKER_USERNAME}/prodproject:latest" .
        #     docker push "${DOCKER_USERNAME}/prodproject:latest"   
        #   env:
        #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            
        
        
            
            
